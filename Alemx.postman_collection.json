{
	"info": {
		"_postman_id": "d96163b9-aad8-4b66-a102-a670197f1269",
		"name": "Alemx",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32002891"
	},
	"item": [
		{
			"name": "Registration",
			"item": [
				{
					"name": "User Registration",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": { \"type\": \"boolean\" },\r",
									"    \"user_id\": { \"type\": \"string\" },\r",
									"    \"identity\": { \"type\": \"string\" },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": { \"type\": \"string\" },\r",
									"        \"user_id\": { \"type\": \"string\" },\r",
									"        \"username\": {},\r",
									"        \"nickname\": {},\r",
									"        \"birthdate\": {},\r",
									"        \"gender\": {},\r",
									"        \"email\": { \"type\": \"string\" },\r",
									"        \"phone\": {},\r",
									"        \"description\": { \"type\": \"string\" },\r",
									"        \"account_status\": { \"type\": \"string\" },\r",
									"        \"kyc_status\": {},\r",
									"        \"role\": { \"type\": \"string\" },\r",
									"        \"ref_code\": { \"type\": \"string\" },\r",
									"        \"created\": { \"type\": \"number\" },\r",
									"        \"updated\": { \"type\": \"number\" },\r",
									"        \"followings\": {},\r",
									"        \"followers\": {},\r",
									"        \"total_likes\": {},\r",
									"        \"total_posts\": {},\r",
									"        \"total_earned\": {},\r",
									"        \"auth_type\": { \"type\": \"string\" },\r",
									"        \"kyc_reject_labels\": {},\r",
									"        \"profile_photo\": {},\r",
									"        \"wallpaper\": {},\r",
									"        \"category\": { \"type\": \"string\" },\r",
									"        \"private_profile\": { \"type\": \"boolean\" },\r",
									"        \"show_my_stars\": { \"type\": \"boolean\" },\r",
									"        \"show_when_i_type\": { \"type\": \"boolean\" },\r",
									"        \"show_balance\": { \"type\": \"boolean\" },\r",
									"        \"show_last_mounth_profit\": { \"type\": \"boolean\" },\r",
									"        \"show_total_earned\": { \"type\": \"boolean\" },\r",
									"        \"show_online\": { \"type\": \"boolean\" },\r",
									"        \"show_no_one_sees_when_you_were_last_online\": { \"type\": \"boolean\" },\r",
									"        \"interests\": { \"type\": \"string\" },\r",
									"        \"ad_intensity\": { \"type\": \"string\" },\r",
									"        \"notify_likes\": { \"type\": \"boolean\" },\r",
									"        \"notify_comment_on_my_post\": { \"type\": \"boolean\" },\r",
									"        \"notify_reply_to_my_comment\": { \"type\": \"boolean\" },\r",
									"        \"notify_mention\": { \"type\": \"boolean\" },\r",
									"        \"notify_reaction_on_my_post\": { \"type\": \"boolean\" },\r",
									"        \"notify_new_sub\": { \"type\": \"boolean\" },\r",
									"        \"notify_important_events\": { \"type\": \"boolean\" }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"user_id\",\r",
									"        \"username\",\r",
									"        \"nickname\",\r",
									"        \"birthdate\",\r",
									"        \"gender\",\r",
									"        \"email\",\r",
									"        \"phone\",\r",
									"        \"description\",\r",
									"        \"account_status\",\r",
									"        \"kyc_status\",\r",
									"        \"role\",\r",
									"        \"ref_code\",\r",
									"        \"created\",\r",
									"        \"updated\",\r",
									"        \"followings\",\r",
									"        \"followers\",\r",
									"        \"total_likes\",\r",
									"        \"total_posts\",\r",
									"        \"total_earned\",\r",
									"        \"auth_type\",\r",
									"        \"kyc_reject_labels\",\r",
									"        \"profile_photo\",\r",
									"        \"wallpaper\",\r",
									"        \"category\",\r",
									"        \"private_profile\",\r",
									"        \"show_my_stars\",\r",
									"        \"show_when_i_type\",\r",
									"        \"show_balance\",\r",
									"        \"show_last_mounth_profit\",\r",
									"        \"show_total_earned\",\r",
									"        \"show_online\",\r",
									"        \"show_no_one_sees_when_you_were_last_online\",\r",
									"        \"interests\",\r",
									"        \"ad_intensity\",\r",
									"        \"notify_likes\",\r",
									"        \"notify_comment_on_my_post\",\r",
									"        \"notify_reply_to_my_comment\",\r",
									"        \"notify_mention\",\r",
									"        \"notify_reaction_on_my_post\",\r",
									"        \"notify_new_sub\",\r",
									"        \"notify_important_events\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"success\", \"user_id\", \"identity\", \"data\"]\r",
									"};\r",
									"\r",
									"let responseData = pm.response.json();\r",
									"if (responseData.user_id) {\r",
									"    pm.collectionVariables.set(\"user_id\", responseData.user_id);\r",
									"    console.log(\"user_id set to:\", responseData.user_id);\r",
									"} else {\r",
									"    console.log(\"user_id not found in response\");\r",
									"}\r",
									"\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random email\r",
									"let randomEmail = `test${Math.floor(Math.random() * 100000)}@mailsac.com`;\r",
									"\r",
									"// Store the email in a collection variable\r",
									"pm.collectionVariables.set(\"temp_email\", randomEmail);\r",
									"\r",
									"console.log(\"Temporary email set:\", randomEmail);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"identity\": \"{{temp_email}}\",\r\n\"password\": \"someTest\",\r\n\"referral_code\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Email Verification Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"status\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"purpose\": \"VERIFY_IDENTITY\",\r\n  \"user_id\": \"{{user_id}}\",\r\n  \"contact_type\": \"email\",\r\n  \"identity\": \"{{temp_email}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/otp/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"otp",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify email using received code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"\r",
									"if (responseData.access_token) {\r",
									"    pm.collectionVariables.set(\"access_token\", responseData.access_token);\r",
									"    console.log(\"Access token saved:\", responseData.access_token);\r",
									"} else {\r",
									"    console.log(\"Access token not found in response.\");\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"\r",
									"const schema = {\r",
									"    \"title\": \"Generated schema for Root\",\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"access_token\": { \"type\": \"string\" },\r",
									"        \"refresh_token\": { \"type\": \"string\" }\r",
									"    },\r",
									"    \"required\": [\"access_token\", \"refresh_token\"]\r",
									"};\r",
									"\r",
									"// Use Ajv for schema validation\r",
									"const Ajv = require('ajv');\r",
									"const ajv = new Ajv();\r",
									"\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    const validate = ajv.compile(schema);\r",
									"    const valid = validate(responseData);\r",
									"    \r",
									"    if (!valid) {\r",
									"        console.log(validate.errors);\r",
									"    }\r",
									"    \r",
									"    pm.expect(valid, JSON.stringify(validate.errors)).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const API_KEY = \"k_2axPqglNpe23eMAf7OwQRcpJX1SIoifEgDQx9r660o23\";\r",
									"const email = pm.collectionVariables.get(\"temp_email\");\r",
									"const maxRetries = 5;\r",
									"let attempt = 0;\r",
									"\r",
									"function fetchMessages() {\r",
									"    if (attempt >= maxRetries) {\r",
									"        console.log(\"Max attempts reached. No messages found.\");\r",
									"        return;\r",
									"    }\r",
									"\r",
									"    attempt++;\r",
									"    console.log(`Attempt ${attempt} to fetch messages`);\r",
									"    \r",
									"    pm.sendRequest({\r",
									"        url: `https://mailsac.com/api/addresses/${email}/messages`,\r",
									"        method: \"GET\",\r",
									"        header: {\r",
									"            \"Mailsac-Key\": API_KEY\r",
									"        }\r",
									"    }, function (err, res) {\r",
									"        if (err) {\r",
									"            console.log(\"Error fetching messages:\", err);\r",
									"        } else {\r",
									"            let messages = res.json();\r",
									"\r",
									"            if (messages.length > 0) {\r",
									"                let messageId = messages[0]._id; // Get the latest message ID\r",
									"\r",
									"                // Fetch the raw email content\r",
									"                pm.sendRequest({\r",
									"                    url: `https://mailsac.com/api/dirty/${email}/${messageId}`,\r",
									"                    method: \"GET\",\r",
									"                    header: {\r",
									"                        \"Mailsac-Key\": API_KEY\r",
									"                    }\r",
									"                }, function (err, res) {\r",
									"                    if (err) {\r",
									"                        console.log(\"Error fetching email text:\", err);\r",
									"                    } else {\r",
									"                        let emailText = res.text();\r",
									"                        console.log(\"Full Email Content:\\n\", emailText);\r",
									"\r",
									"                        let plainText = emailText.replace(/<[^>]+>/g, ' ');\r",
									"                        let otpMatch = plainText.match(/\\b\\d{4}\\b/);\r",
									"\r",
									"                        if (otpMatch) {\r",
									"                            let otpCode = otpMatch[0];\r",
									"                            pm.collectionVariables.set(\"otp_code\", otpCode);\r",
									"                            console.log(\"OTP Code set:\", otpCode);\r",
									"                        } else {\r",
									"                            console.log(\"OTP not found in the email.\");\r",
									"                        }\r",
									"                    }\r",
									"                });\r",
									"            } else {\r",
									"                console.log(\"No messages found. Retrying in 5 seconds...\");\r",
									"                setTimeout(fetchMessages, 5000);\r",
									"            }\r",
									"        }\r",
									"    });\r",
									"}\r",
									"\r",
									"fetchMessages();\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user_id\": \"{{user_id}}\",\r\n  \"email_otp_code\": \"{{otp_code}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/verify-contact",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"verify-contact"
							]
						}
					},
					"response": []
				},
				{
					"name": "Setup Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(17000);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"user\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"user_id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"username\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"nickname\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"birthdate\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"gender\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"email\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"phone\": {},\r",
									"        \"description\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"account_status\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"kyc_status\": {},\r",
									"        \"role\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"ref_code\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"created\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"updated\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"followings\": {},\r",
									"        \"followers\": {},\r",
									"        \"total_likes\": {},\r",
									"        \"total_posts\": {},\r",
									"        \"total_earned\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"auth_type\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"kyc_reject_labels\": {},\r",
									"        \"profile_photo\": {},\r",
									"        \"wallpaper\": {},\r",
									"        \"category\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"private_profile\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"show_my_stars\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"show_when_i_type\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"show_balance\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"show_last_mounth_profit\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"show_total_earned\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"show_online\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"show_no_one_sees_when_you_were_last_online\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"interests\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"ad_intensity\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"notify_likes\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"notify_comment_on_my_post\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"notify_reply_to_my_comment\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"notify_mention\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"notify_reaction_on_my_post\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"notify_new_sub\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"notify_important_events\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"vault_account_id\": {}\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"user_id\",\r",
									"        \"username\",\r",
									"        \"nickname\",\r",
									"        \"birthdate\",\r",
									"        \"gender\",\r",
									"        \"email\",\r",
									"        \"phone\",\r",
									"        \"description\",\r",
									"        \"account_status\",\r",
									"        \"kyc_status\",\r",
									"        \"role\",\r",
									"        \"ref_code\",\r",
									"        \"created\",\r",
									"        \"updated\",\r",
									"        \"followings\",\r",
									"        \"followers\",\r",
									"        \"total_likes\",\r",
									"        \"total_posts\",\r",
									"        \"total_earned\",\r",
									"        \"auth_type\",\r",
									"        \"kyc_reject_labels\",\r",
									"        \"profile_photo\",\r",
									"        \"wallpaper\",\r",
									"        \"category\",\r",
									"        \"private_profile\",\r",
									"        \"show_my_stars\",\r",
									"        \"show_when_i_type\",\r",
									"        \"show_balance\",\r",
									"        \"show_last_mounth_profit\",\r",
									"        \"show_total_earned\",\r",
									"        \"show_online\",\r",
									"        \"show_no_one_sees_when_you_were_last_online\",\r",
									"        \"interests\",\r",
									"        \"ad_intensity\",\r",
									"        \"notify_likes\",\r",
									"        \"notify_comment_on_my_post\",\r",
									"        \"notify_reply_to_my_comment\",\r",
									"        \"notify_mention\",\r",
									"        \"notify_reaction_on_my_post\",\r",
									"        \"notify_new_sub\",\r",
									"        \"notify_important_events\",\r",
									"        \"vault_account_id\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"user\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a random email\r",
									"let randomNickname = `test${Math.floor(Math.random() * 100000)}`;\r",
									"\r",
									"// Store the email in a collection variable\r",
									"pm.collectionVariables.set(\"nickname\", randomNickname);\r",
									"\r",
									"console.log(\"Nickname set:\", randomNickname);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"value": "{\"nickname\": \"{{nickname}}\", \"username\": \"Andrii Stetsula\", \"birthdate\": \"07-01-2003\", \"gender\": \"male\", \"interests\": [\"sports\", \"cars\"]}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/user/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"profile"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Wallet",
			"item": [
				{
					"name": "Get Balances",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/wallet/balances?asset_symbol=\"ALEM\"",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"wallet",
								"balances"
							],
							"query": [
								{
									"key": "asset_symbol",
									"value": "\"ALEM\""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Wallet",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomWalletAddress() {\r",
									"    let hex = \"0x\";\r",
									"    const characters = \"abcdef0123456789\";\r",
									"    \r",
									"    for (let i = 0; i < 40; i++) {\r",
									"        hex += characters[Math.floor(Math.random() * characters.length)];\r",
									"    }\r",
									"    \r",
									"    return hex;\r",
									"}\r",
									"\r",
									"const walletAddress = generateRandomWalletAddress();\r",
									"pm.collectionVariables.set(\"crypto_wallet\", walletAddress);\r",
									"console.log(\"Generated Wallet Address:\", walletAddress);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"{\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"asset_symbol\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"address\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"asset_symbol\",\r",
									"        \"address\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"asset_symbol\": \"\",\r\n\"address\": \"{{crypto_wallet}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/wallet/address",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"wallet",
								"address"
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Wallet Points",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"{\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"tx_id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"amount\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"asset_symbol\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"tx_type\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"created\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"updated\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"tx_status\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"tx_id\",\r",
									"        \"amount\",\r",
									"        \"asset_symbol\",\r",
									"        \"tx_type\",\r",
									"        \"created\",\r",
									"        \"updated\",\r",
									"        \"tx_status\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"asset_symbol\": \"ALEM\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/wallet/points",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"wallet",
								"points"
							]
						}
					},
					"response": []
				},
				{
					"name": "Wallet Withdraw",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"asset_symbol\": \"\",\r\n  \"wallet_address\": \"{{crypto_wallet}}\",\r\n  \"amount\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/wallet/withdraw",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"wallet",
								"withdraw"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send Airdrop",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/wallet/airdrop",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"wallet",
								"airdrop"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Airdrop",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"{\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"airdrop_available\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"remaining_time\": {\r",
									"          \"type\": \"number\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"airdrop_available\",\r",
									"        \"remaining_time\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/wallet/check-airdrop",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"wallet",
								"check-airdrop"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Transactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"{\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"data\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"              \"tx_id\": {\r",
									"                \"type\": \"string\"\r",
									"              },\r",
									"              \"amount\": {\r",
									"                \"type\": \"string\"\r",
									"              },\r",
									"              \"asset_symbol\": {\r",
									"                \"type\": \"string\"\r",
									"              },\r",
									"              \"tx_type\": {\r",
									"                \"type\": \"string\"\r",
									"              },\r",
									"              \"created\": {\r",
									"                \"type\": \"number\"\r",
									"              },\r",
									"              \"updated\": {\r",
									"                \"type\": \"number\"\r",
									"              },\r",
									"              \"tx_status\": {\r",
									"                \"type\": \"string\"\r",
									"              }\r",
									"            },\r",
									"            \"required\": [\r",
									"              \"tx_id\",\r",
									"              \"amount\",\r",
									"              \"asset_symbol\",\r",
									"              \"tx_type\",\r",
									"              \"created\",\r",
									"              \"updated\",\r",
									"              \"tx_status\"\r",
									"            ]\r",
									"          }\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"data\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/wallet/transactions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"wallet",
								"transactions"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Posts",
			"item": [
				{
					"name": "Get All Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									" {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"posts\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"              \"id\": {\r",
									"                \"type\": \"number\"\r",
									"              },\r",
									"              \"caption\": {\r",
									"                \"type\": \"string\"\r",
									"              },\r",
									"              \"hashtags\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"paid_caption\": {},\r",
									"              \"allow_comments\": {\r",
									"                \"type\": \"boolean\"\r",
									"              },\r",
									"              \"created\": {\r",
									"                \"type\": \"string\"\r",
									"              },\r",
									"              \"status\": {\r",
									"                \"type\": \"string\"\r",
									"              },\r",
									"              \"post_id\": {\r",
									"                \"type\": \"string\"\r",
									"              },\r",
									"              \"user_id\": {\r",
									"                \"type\": \"number\"\r",
									"              },\r",
									"              \"view_count\": {\r",
									"                \"type\": \"number\"\r",
									"              },\r",
									"              \"is_saved\": {\r",
									"                \"type\": \"boolean\"\r",
									"              },\r",
									"              \"is_liked\": {\r",
									"                \"type\": \"boolean\"\r",
									"              },\r",
									"              \"is_ads\": {\r",
									"                \"type\": \"boolean\"\r",
									"              },\r",
									"              \"is_rec\": {\r",
									"                \"type\": \"boolean\"\r",
									"              },\r",
									"              \"is_pin\": {\r",
									"                \"type\": \"boolean\"\r",
									"              },\r",
									"              \"mentioned_users\": {},\r",
									"              \"updated\": {\r",
									"                \"type\": \"string\"\r",
									"              },\r",
									"              \"location\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                  \"name\": {\r",
									"                    \"type\": \"string\"\r",
									"                  },\r",
									"                  \"city\": {},\r",
									"                  \"state\": {},\r",
									"                  \"country\": {},\r",
									"                  \"latitude\": {\r",
									"                    \"type\": \"number\"\r",
									"                  },\r",
									"                  \"longitude\": {\r",
									"                    \"type\": \"number\"\r",
									"                  }\r",
									"                },\r",
									"                \"required\": [\r",
									"                  \"name\",\r",
									"                  \"city\",\r",
									"                  \"state\",\r",
									"                  \"country\",\r",
									"                  \"latitude\",\r",
									"                  \"longitude\"\r",
									"                ]\r",
									"              },\r",
									"              \"total_likes\": {\r",
									"                \"type\": \"number\"\r",
									"              },\r",
									"              \"total_comments\": {\r",
									"                \"type\": \"number\"\r",
									"              },\r",
									"              \"total_reposts\": {\r",
									"                \"type\": \"number\"\r",
									"              },\r",
									"              \"profile_data\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                  \"user_id\": {\r",
									"                    \"type\": \"string\"\r",
									"                  },\r",
									"                  \"username\": {\r",
									"                    \"type\": \"string\"\r",
									"                  },\r",
									"                  \"nickname\": {\r",
									"                    \"type\": \"string\"\r",
									"                  },\r",
									"                  \"is_stared\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                  },\r",
									"                  \"is_followed\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                  },\r",
									"                  \"profile_photo\": {\r",
									"                    \"type\": \"string\"\r",
									"                  }\r",
									"                },\r",
									"                \"required\": [\r",
									"                  \"user_id\",\r",
									"                  \"username\",\r",
									"                  \"nickname\",\r",
									"                  \"is_stared\",\r",
									"                  \"is_followed\"\r",
									"                ]\r",
									"              },\r",
									"              \"post_images\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                  \"type\": \"object\",\r",
									"                  \"properties\": {\r",
									"                    \"id\": {\r",
									"                      \"type\": \"number\"\r",
									"                    },\r",
									"                    \"image_id\": {\r",
									"                      \"type\": \"number\"\r",
									"                    },\r",
									"                    \"post_id\": {\r",
									"                      \"type\": \"number\"\r",
									"                    },\r",
									"                    \"images\": {\r",
									"                      \"type\": \"object\",\r",
									"                      \"properties\": {\r",
									"                        \"id\": {\r",
									"                          \"type\": \"number\"\r",
									"                        },\r",
									"                        \"is_paid\": {\r",
									"                          \"type\": \"boolean\"\r",
									"                        },\r",
									"                        \"filters\": {\r",
									"                          \"type\": \"string\"\r",
									"                        },\r",
									"                        \"image_url\": {\r",
									"                          \"type\": \"string\"\r",
									"                        },\r",
									"                        \"payment_data\": {\r",
									"                          \"type\": \"object\",\r",
									"                          \"properties\": {\r",
									"                            \"price\": {},\r",
									"                            \"asset\": {}\r",
									"                          },\r",
									"                          \"required\": [\r",
									"                            \"price\",\r",
									"                            \"asset\"\r",
									"                          ]\r",
									"                        }\r",
									"                      },\r",
									"                      \"required\": [\r",
									"                        \"id\",\r",
									"                        \"is_paid\",\r",
									"                        \"filters\",\r",
									"                        \"image_url\",\r",
									"                        \"payment_data\"\r",
									"                      ]\r",
									"                    }\r",
									"                  },\r",
									"                  \"required\": [\r",
									"                    \"id\",\r",
									"                    \"image_id\",\r",
									"                    \"post_id\",\r",
									"                    \"images\"\r",
									"                  ]\r",
									"                }\r",
									"              }\r",
									"            },\r",
									"            \"required\": [\r",
									"              \"id\",\r",
									"              \"caption\",\r",
									"              \"hashtags\",\r",
									"              \"paid_caption\",\r",
									"              \"allow_comments\",\r",
									"              \"created\",\r",
									"              \"status\",\r",
									"              \"post_id\",\r",
									"              \"user_id\",\r",
									"              \"view_count\",\r",
									"              \"is_saved\",\r",
									"              \"is_liked\",\r",
									"              \"is_ads\",\r",
									"              \"is_rec\",\r",
									"              \"is_pin\",\r",
									"              \"mentioned_users\",\r",
									"              \"updated\",\r",
									"              \"total_likes\",\r",
									"              \"total_comments\",\r",
									"              \"total_reposts\",\r",
									"              \"profile_data\",\r",
									"              \"post_images\"\r",
									"            ]\r",
									"          }\r",
									"        },\r",
									"        \"total_posts\": {\r",
									"          \"type\": \"number\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"posts\",\r",
									"        \"total_posts\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"// pm.test(\"Response should match the JSON schema\", function () {\r",
									"//     pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Post by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"{\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"post\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"caption\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"hashtags\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {\r",
									"                \"type\": \"string\"\r",
									"              }\r",
									"            },\r",
									"            \"paid_caption\": {},\r",
									"            \"allow_comments\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"created\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"status\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"post_id\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"user_id\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"view_count\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"is_saved\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"is_liked\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"is_ads\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"is_rec\": {\r",
									"              \"type\": \"boolean\"\r",
									"            },\r",
									"            \"updated\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"location\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"name\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"city\": {},\r",
									"                \"state\": {},\r",
									"                \"country\": {},\r",
									"                \"latitude\": {\r",
									"                  \"type\": \"number\"\r",
									"                },\r",
									"                \"longitude\": {\r",
									"                  \"type\": \"number\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"name\",\r",
									"                \"city\",\r",
									"                \"state\",\r",
									"                \"country\",\r",
									"                \"latitude\",\r",
									"                \"longitude\"\r",
									"              ]\r",
									"            },\r",
									"            \"total_likes\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"total_comments\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"total_reposts\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"profile_data\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"user_id\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"username\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"nickname\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"is_stared\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                },\r",
									"                \"is_followed\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                },\r",
									"                \"profile_photo\": {}\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"user_id\",\r",
									"                \"username\",\r",
									"                \"nickname\",\r",
									"                \"is_stared\",\r",
									"                \"is_followed\",\r",
									"                \"profile_photo\"\r",
									"              ]\r",
									"            },\r",
									"            \"post_images\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {}\r",
									"            }\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"caption\",\r",
									"            \"hashtags\",\r",
									"            \"paid_caption\",\r",
									"            \"allow_comments\",\r",
									"            \"created\",\r",
									"            \"status\",\r",
									"            \"post_id\",\r",
									"            \"user_id\",\r",
									"            \"view_count\",\r",
									"            \"is_saved\",\r",
									"            \"is_liked\",\r",
									"            \"is_ads\",\r",
									"            \"is_rec\",\r",
									"            \"updated\",\r",
									"            \"location\",\r",
									"            \"total_likes\",\r",
									"            \"total_comments\",\r",
									"            \"total_reposts\",\r",
									"            \"profile_data\",\r",
									"            \"post_images\"\r",
									"          ]\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"post\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/{{post_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"{{post_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Post Photos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {}\r",
									"};\r",
									"\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/photos/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"photos",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Post Videos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {}\r",
									"};\r",
									"\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/videos/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"videos",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"caption\": \"Some Caption\",\r\n  \"hashtags\": [\r\n    \"nature\"\r\n  ],\r\n  \"location\": {\r\n    \"name\": \"Test Post\",\r\n    \"latitude\": 0,\r\n    \"longitude\": 0\r\n},\r\n  \"allow_comments\": true,\r\n  \"images\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Posts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();  // Parse the JSON response\r",
									"\r",
									"if (responseData.success && responseData.data.posts.length > 0) {\r",
									"    let firstPost = responseData.data.posts[0];\r",
									"\r",
									"    // Store 'id' in 'post_id' variable (existing logic)\r",
									"    if (firstPost.id) {\r",
									"        pm.collectionVariables.set(\"post_id\", firstPost.id);\r",
									"        console.log(\"post_id set to:\", firstPost.id);\r",
									"    } else {\r",
									"        console.log(\"id not found in response\");\r",
									"    }\r",
									"\r",
									"    // Store 'post_id' (string one) from the post in a new variable 'post_guid'\r",
									"    if (firstPost.post_id) {\r",
									"        pm.collectionVariables.set(\"post_guid\", firstPost.post_id);\r",
									"        console.log(\"post_guid set to:\", firstPost.post_id);\r",
									"    } else {\r",
									"        console.log(\"post_id (string) not found in response\");\r",
									"    }\r",
									"} else {\r",
									"    console.log(\"No posts found or request was not successful\");\r",
									"}\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"posts\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"              \"id\": {\r",
									"                \"type\": \"number\"\r",
									"              },\r",
									"              \"caption\": {\r",
									"                \"type\": \"string\"\r",
									"              },\r",
									"              \"hashtags\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              },\r",
									"              \"paid_caption\": {},\r",
									"              \"allow_comments\": {\r",
									"                \"type\": \"boolean\"\r",
									"              },\r",
									"              \"created\": {\r",
									"                \"type\": \"string\"\r",
									"              },\r",
									"              \"status\": {\r",
									"                \"type\": \"string\"\r",
									"              },\r",
									"              \"post_id\": {\r",
									"                \"type\": \"string\"\r",
									"              },\r",
									"              \"user_id\": {\r",
									"                \"type\": \"number\"\r",
									"              },\r",
									"              \"view_count\": {\r",
									"                \"type\": \"number\"\r",
									"              },\r",
									"              \"is_saved\": {\r",
									"                \"type\": \"boolean\"\r",
									"              },\r",
									"              \"is_liked\": {\r",
									"                \"type\": \"boolean\"\r",
									"              },\r",
									"              \"is_ads\": {\r",
									"                \"type\": \"boolean\"\r",
									"              },\r",
									"              \"is_rec\": {\r",
									"                \"type\": \"boolean\"\r",
									"              },\r",
									"              \"updated\": {\r",
									"                \"type\": \"string\"\r",
									"              },\r",
									"              \"location\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                  \"name\": {\r",
									"                    \"type\": \"string\"\r",
									"                  },\r",
									"                  \"city\": {},\r",
									"                  \"state\": {},\r",
									"                  \"country\": {},\r",
									"                  \"latitude\": {\r",
									"                    \"type\": \"number\"\r",
									"                  },\r",
									"                  \"longitude\": {\r",
									"                    \"type\": \"number\"\r",
									"                  }\r",
									"                },\r",
									"                \"required\": [\r",
									"                  \"name\",\r",
									"                  \"city\",\r",
									"                  \"state\",\r",
									"                  \"country\",\r",
									"                  \"latitude\",\r",
									"                  \"longitude\"\r",
									"                ]\r",
									"              },\r",
									"              \"total_likes\": {\r",
									"                \"type\": \"number\"\r",
									"              },\r",
									"              \"total_comments\": {\r",
									"                \"type\": \"number\"\r",
									"              },\r",
									"              \"total_reposts\": {\r",
									"                \"type\": \"number\"\r",
									"              },\r",
									"              \"profile_data\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                  \"user_id\": {\r",
									"                    \"type\": \"string\"\r",
									"                  },\r",
									"                  \"username\": {\r",
									"                    \"type\": \"string\"\r",
									"                  },\r",
									"                  \"nickname\": {\r",
									"                    \"type\": \"string\"\r",
									"                  },\r",
									"                  \"is_stared\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                  },\r",
									"                  \"is_followed\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                  },\r",
									"                  \"profile_photo\": {}\r",
									"                },\r",
									"                \"required\": [\r",
									"                  \"user_id\",\r",
									"                  \"username\",\r",
									"                  \"nickname\",\r",
									"                  \"is_stared\",\r",
									"                  \"is_followed\",\r",
									"                  \"profile_photo\"\r",
									"                ]\r",
									"              },\r",
									"              \"post_images\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {}\r",
									"              }\r",
									"            },\r",
									"            \"required\": [\r",
									"              \"id\",\r",
									"              \"caption\",\r",
									"              \"hashtags\",\r",
									"              \"paid_caption\",\r",
									"              \"allow_comments\",\r",
									"              \"created\",\r",
									"              \"status\",\r",
									"              \"post_id\",\r",
									"              \"user_id\",\r",
									"              \"view_count\",\r",
									"              \"is_saved\",\r",
									"              \"is_liked\",\r",
									"              \"is_ads\",\r",
									"              \"is_rec\",\r",
									"              \"updated\",\r",
									"              \"location\",\r",
									"              \"total_likes\",\r",
									"              \"total_comments\",\r",
									"              \"total_reposts\",\r",
									"              \"profile_data\",\r",
									"              \"post_images\"\r",
									"            ]\r",
									"          }\r",
									"        },\r",
									"        \"total_posts\": {\r",
									"          \"type\": \"number\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"posts\",\r",
									"        \"total_posts\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/user-posts?user_id={{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"user-posts"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Pin Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/pin/?post_id={{post_guid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"pin",
								""
							],
							"query": [
								{
									"key": "post_id",
									"value": "{{post_guid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Unpin Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/pin/?post_id={{post_guid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"pin",
								""
							],
							"query": [
								{
									"key": "post_id",
									"value": "{{post_guid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Like Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{baseUrl}}/posts/like-post?post_id={{post_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"like-post"
							],
							"query": [
								{
									"key": "post_id",
									"value": "{{post_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlike Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"{\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/unlike-post?post_id={{post_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"unlike-post"
							],
							"query": [
								{
									"key": "post_id",
									"value": "{{post_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Likes",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/like-users?post_id={{post_guid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"like-users"
							],
							"query": [
								{
									"key": "post_id",
									"value": "{{post_guid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									" {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/save/{{post_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"save",
								"{{post_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Saved Post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"{\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/save/{{post_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"save",
								"{{post_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"post_id\": \"{{post_id}}\",\r\n    \"content\": \"Some Test comment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts/comment-create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"comment-create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"if (responseData.total_comments > 0 && responseData.comments.length > 0) {\r",
									"    let commentId = responseData.comments[0].comment_id;\r",
									"    if (commentId) {\r",
									"        pm.collectionVariables.set(\"comment_id\", commentId);\r",
									"        console.log(\"comment_id set to:\", commentId);\r",
									"    } else {\r",
									"        console.log(\"comment_id not found in response\");\r",
									"    }\r",
									"} else {\r",
									"    console.log(\"No comments found in the response\");\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									" {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"total_comments\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"comments\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"          \"comment_id\": {\r",
									"            \"type\": \"number\"\r",
									"          },\r",
									"          \"user_id\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"user_photo\": {},\r",
									"          \"username\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"nickname\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"comment_text\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"mentions\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {},\r",
									"            \"required\": []\r",
									"          },\r",
									"          \"comment_media\": {},\r",
									"          \"created_at\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"likes_count\": {\r",
									"            \"type\": \"number\"\r",
									"          },\r",
									"          \"reply_count\": {\r",
									"            \"type\": \"number\"\r",
									"          },\r",
									"          \"is_liked\": {\r",
									"            \"type\": \"boolean\"\r",
									"          },\r",
									"          \"is_my_comment\": {\r",
									"            \"type\": \"boolean\"\r",
									"          }\r",
									"        },\r",
									"        \"required\": [\r",
									"          \"comment_id\",\r",
									"          \"user_id\",\r",
									"          \"user_photo\",\r",
									"          \"username\",\r",
									"          \"nickname\",\r",
									"          \"comment_text\",\r",
									"          \"mentions\",\r",
									"          \"comment_media\",\r",
									"          \"created_at\",\r",
									"          \"likes_count\",\r",
									"          \"reply_count\",\r",
									"          \"is_liked\",\r",
									"          \"is_my_comment\"\r",
									"        ]\r",
									"      }\r",
									"    },\r",
									"    \"is_my_post\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"total_comments\",\r",
									"    \"comments\",\r",
									"    \"is_my_post\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/comments/{{post_id}}/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"comments",
								"{{post_id}}",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Reply Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"post_id\": \"{{post_id}}\",\r\n  \"content\": \"Test Reply Comment\",\r\n  \"comment_id\": \"{{comment_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts/reply-comment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"reply-comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"comment_id\": \"{{comment_id}}\",\r\n  \"content\": \"Updated Comment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/posts/edit-comment/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"edit-comment",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Like Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"   {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/comment-like?comment_id={{comment_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"comment-like"
							],
							"query": [
								{
									"key": "comment_id",
									"value": "{{comment_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlike Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"   {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/comment-unlike?comment_id={{comment_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"comment-unlike"
							],
							"query": [
								{
									"key": "comment_id",
									"value": "{{comment_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"status\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/delete-comment/{{comment_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"delete-comment",
								"{{comment_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Repost To My Feed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"status\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/repost_to_my_feed?post_id={{static_post_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"repost_to_my_feed"
							],
							"query": [
								{
									"key": "post_id",
									"value": "{{static_post_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Repost From My Feed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"status\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/posts/remove_repost_from_my_feed/?post_id={{static_post_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"posts",
								"remove_repost_from_my_feed",
								""
							],
							"query": [
								{
									"key": "post_id",
									"value": "{{static_post_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Stories",
			"item": [
				{
					"name": "Create Story",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"   {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"value": "{\"location\": {        \"name\": \"testing loc\",        \"city\": \"Lviv\",        \"country\": \"Ukraine\",        \"latitude\": 40.678,        \"longitude\": 45.989   },  \"contents\": [\"1\"], \"allow_comments\": true}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/stories/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stories",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Current Stories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();  // Parse the JSON response\r",
									"\r",
									"if (responseData.success && responseData.data && responseData.data.stories.length > 0) {\r",
									"    let storyId = responseData.data.stories[0].id;  // Extract story_id from the first story\r",
									"    if (storyId) {\r",
									"        pm.collectionVariables.set(\"story_id\", storyId);  // Store in collection variable\r",
									"        console.log(\"story_id set to:\", storyId);\r",
									"    } else {\r",
									"        console.log(\"story_id not found in response\");\r",
									"    }\r",
									"} else {\r",
									"    console.log(\"No stories found or request was not successful\");\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"   {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/stories/current/?user_id={{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stories",
								"current",
								""
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Stories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();  // Parse the JSON response\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"success\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"profile\": {\r",
									"          \"type\": \"object\",\r",
									"          \"properties\": {\r",
									"            \"id\": {\r",
									"              \"type\": \"number\"\r",
									"            },\r",
									"            \"user_id\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"username\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"nickname\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"profile_photo\": {}\r",
									"          },\r",
									"          \"required\": [\r",
									"            \"id\",\r",
									"            \"user_id\",\r",
									"            \"username\",\r",
									"            \"nickname\",\r",
									"            \"profile_photo\"\r",
									"          ]\r",
									"        },\r",
									"        \"stories\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"              \"id\": {\r",
									"                \"type\": \"number\"\r",
									"              },\r",
									"              \"story_id\": {\r",
									"                \"type\": \"string\"\r",
									"              },\r",
									"              \"location\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                  \"name\": {\r",
									"                    \"type\": \"string\"\r",
									"                  },\r",
									"                  \"city\": {\r",
									"                    \"type\": \"string\"\r",
									"                  },\r",
									"                  \"state\": {},\r",
									"                  \"country\": {\r",
									"                    \"type\": \"string\"\r",
									"                  },\r",
									"                  \"latitude\": {\r",
									"                    \"type\": \"number\"\r",
									"                  },\r",
									"                  \"longitude\": {\r",
									"                    \"type\": \"number\"\r",
									"                  }\r",
									"                },\r",
									"                \"required\": [\r",
									"                  \"name\",\r",
									"                  \"city\",\r",
									"                  \"state\",\r",
									"                  \"country\",\r",
									"                  \"latitude\",\r",
									"                  \"longitude\"\r",
									"                ]\r",
									"              },\r",
									"              \"total_likes\": {\r",
									"                \"type\": \"number\"\r",
									"              },\r",
									"              \"total_comments\": {\r",
									"                \"type\": \"number\"\r",
									"              },\r",
									"              \"is_liked\": {\r",
									"                \"type\": \"boolean\"\r",
									"              },\r",
									"              \"story_images\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                  \"type\": \"object\",\r",
									"                  \"properties\": {\r",
									"                    \"story_id\": {\r",
									"                      \"type\": \"number\"\r",
									"                    },\r",
									"                    \"image_id\": {\r",
									"                      \"type\": \"number\"\r",
									"                    },\r",
									"                    \"images\": {\r",
									"                      \"type\": \"object\",\r",
									"                      \"properties\": {\r",
									"                        \"id\": {\r",
									"                          \"type\": \"number\"\r",
									"                        },\r",
									"                        \"is_paid\": {\r",
									"                          \"type\": \"boolean\"\r",
									"                        },\r",
									"                        \"filters\": {\r",
									"                          \"type\": \"string\"\r",
									"                        },\r",
									"                        \"image_url\": {\r",
									"                          \"type\": \"string\"\r",
									"                        },\r",
									"                        \"image_texts\": {\r",
									"                          \"type\": \"array\",\r",
									"                          \"items\": {}\r",
									"                        }\r",
									"                      },\r",
									"                      \"required\": [\r",
									"                        \"id\",\r",
									"                        \"is_paid\",\r",
									"                        \"filters\",\r",
									"                        \"image_url\",\r",
									"                        \"image_texts\"\r",
									"                      ]\r",
									"                    }\r",
									"                  },\r",
									"                  \"required\": [\r",
									"                    \"story_id\",\r",
									"                    \"image_id\",\r",
									"                    \"images\"\r",
									"                  ]\r",
									"                }\r",
									"              },\r",
									"              \"story_music\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {}\r",
									"              },\r",
									"              \"created\": {\r",
									"                \"type\": \"string\"\r",
									"              }\r",
									"            },\r",
									"            \"required\": [\r",
									"              \"id\",\r",
									"              \"story_id\",\r",
									"              \"location\",\r",
									"              \"total_likes\",\r",
									"              \"total_comments\",\r",
									"              \"is_liked\",\r",
									"              \"story_images\",\r",
									"              \"story_music\",\r",
									"              \"created\"\r",
									"            ]\r",
									"          }\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"success\",\r",
									"        \"profile\",\r",
									"        \"stories\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/stories/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stories",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Story Like",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"   {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/stories/like?story_id={{story_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stories",
								"like"
							],
							"query": [
								{
									"key": "story_id",
									"value": "{{story_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Story Unlike",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"   {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/stories/unlike?story_id={{story_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stories",
								"unlike"
							],
							"query": [
								{
									"key": "story_id",
									"value": "{{story_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Story Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"   {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"story_id\": \"{{story_id}}\",\r\n  \"content\": \"Some story comment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/stories/comment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stories",
								"comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Story Comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let responseData = pm.response.json();\r",
									"if (responseData.total_comments > 0 && responseData.comments.length > 0) {\r",
									"    let commentId = responseData.comments[0].comment_id;\r",
									"    if (commentId) {\r",
									"        pm.collectionVariables.set(\"comment_id\", commentId);\r",
									"        console.log(\"comment_id set to:\", commentId);\r",
									"    } else {\r",
									"        console.log(\"comment_id not found in response\");\r",
									"    }\r",
									"} else {\r",
									"    console.log(\"No comments found in the response\");\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"{\r",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"total_comments\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"comments\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"          \"comment_id\": {\r",
									"            \"type\": \"number\"\r",
									"          },\r",
									"          \"user_id\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"user_photo\": {},\r",
									"          \"username\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"nickname\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"comment_text\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"mentions\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {},\r",
									"            \"required\": []\r",
									"          },\r",
									"          \"comment_media\": {},\r",
									"          \"created_at\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"likes_count\": {\r",
									"            \"type\": \"number\"\r",
									"          },\r",
									"          \"reply_count\": {\r",
									"            \"type\": \"number\"\r",
									"          },\r",
									"          \"is_liked\": {\r",
									"            \"type\": \"boolean\"\r",
									"          },\r",
									"          \"is_my_comment\": {\r",
									"            \"type\": \"boolean\"\r",
									"          }\r",
									"        },\r",
									"        \"required\": [\r",
									"          \"comment_id\",\r",
									"          \"user_id\",\r",
									"          \"user_photo\",\r",
									"          \"username\",\r",
									"          \"nickname\",\r",
									"          \"comment_text\",\r",
									"          \"mentions\",\r",
									"          \"comment_media\",\r",
									"          \"created_at\",\r",
									"          \"likes_count\",\r",
									"          \"reply_count\",\r",
									"          \"is_liked\",\r",
									"          \"is_my_comment\"\r",
									"        ]\r",
									"      }\r",
									"    },\r",
									"    \"is_my_story\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"total_comments\",\r",
									"    \"comments\",\r",
									"    \"is_my_story\"\r",
									"  ]\r",
									"};\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/stories/comments/{{story_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stories",
								"comments",
								"{{story_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Story Comment Reply",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"   {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"story_id\": \"{{story_id}}\",\r\n  \"content\": \"Story Comment Reply\",\r\n  \"comment_id\": \"{{comment_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/stories/comment/reply",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stories",
								"comment",
								"reply"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"   {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"comment_id\": \"{{comment_id}}\",\r\n  \"content\": \"Edited comment\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/stories/edit-comment",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stories",
								"edit-comment"
							]
						}
					},
					"response": []
				},
				{
					"name": "Story Comment Like",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"   {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/stories/like-comment?comment_id={{comment_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stories",
								"like-comment"
							],
							"query": [
								{
									"key": "comment_id",
									"value": "{{comment_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Story Comment Unlike",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"   {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/stories/unlike-comment?comment_id={{comment_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stories",
								"unlike-comment"
							],
							"query": [
								{
									"key": "comment_id",
									"value": "{{comment_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"   {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"status\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"status\"\r",
									"  ]\r",
									"};;\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/stories/delete-comment/{{comment_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stories",
								"delete-comment",
								"{{comment_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Reels",
			"item": [
				{
					"name": "Upload Content",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"{\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"image_url\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"image_url\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "content",
									"type": "file",
									"src": "/C:/Users/Andrii/Downloads/Telegram Desktop/IMG_8561.MP4"
								},
								{
									"key": "filters",
									"value": "{\"brightness\": 1, \"contrast\": 1, \"saturation\": 1, \"sharpness\": 0, \"rotation\": 0, \"colorHue\": 0}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/reels/upload-content",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reels",
								"upload-content"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Reel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Parse the response\r",
									"let response = pm.response.json();\r",
									"\r",
									"// Check if data and id exist\r",
									"if (response.data && response.data.id) {\r",
									"    let reelId = response.data.id;\r",
									"    \r",
									"    // Save it as a collection variable\r",
									"    pm.collectionVariables.set('reel_id', reelId);\r",
									"    \r",
									"    console.log('Saved reel_id:', reelId);\r",
									"} else {\r",
									"    console.log('No id found in response');\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"{\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(response, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "data",
									"value": "{\"contents\": [\"840\"], \"location\": null, \"allow_comments\": false}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/reels/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reels",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Reels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"{\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"profile\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"user_id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"username\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"nickname\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"profile_photo\": {}\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"user_id\",\r",
									"        \"username\",\r",
									"        \"nickname\",\r",
									"        \"profile_photo\"\r",
									"      ]\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"          \"id\": {\r",
									"            \"type\": \"number\"\r",
									"          },\r",
									"          \"reel_id\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"location\": {},\r",
									"          \"total_likes\": {\r",
									"            \"type\": \"number\"\r",
									"          },\r",
									"          \"total_comments\": {\r",
									"            \"type\": \"number\"\r",
									"          },\r",
									"          \"total_views\": {\r",
									"            \"type\": \"number\"\r",
									"          },\r",
									"          \"total_shares\": {\r",
									"            \"type\": \"number\"\r",
									"          },\r",
									"          \"is_liked\": {\r",
									"            \"type\": \"boolean\"\r",
									"          },\r",
									"          \"allow_comments\": {\r",
									"            \"type\": \"boolean\"\r",
									"          },\r",
									"          \"reel_images\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"reel_id\": {\r",
									"                  \"type\": \"number\"\r",
									"                },\r",
									"                \"image_id\": {\r",
									"                  \"type\": \"number\"\r",
									"                },\r",
									"                \"images\": {\r",
									"                  \"type\": \"object\",\r",
									"                  \"properties\": {\r",
									"                    \"id\": {\r",
									"                      \"type\": \"number\"\r",
									"                    },\r",
									"                    \"is_paid\": {\r",
									"                      \"type\": \"boolean\"\r",
									"                    },\r",
									"                    \"filters\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"image_url\": {\r",
									"                      \"type\": \"string\"\r",
									"                    }\r",
									"                  },\r",
									"                  \"required\": [\r",
									"                    \"id\",\r",
									"                    \"is_paid\",\r",
									"                    \"filters\",\r",
									"                    \"image_url\"\r",
									"                  ]\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"reel_id\",\r",
									"                \"image_id\",\r",
									"                \"images\"\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"reel_music\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {}\r",
									"          },\r",
									"          \"created\": {\r",
									"            \"type\": \"string\"\r",
									"          }\r",
									"        },\r",
									"        \"required\": [\r",
									"          \"id\",\r",
									"          \"reel_id\",\r",
									"          \"location\",\r",
									"          \"total_likes\",\r",
									"          \"total_comments\",\r",
									"          \"total_views\",\r",
									"          \"total_shares\",\r",
									"          \"is_liked\",\r",
									"          \"allow_comments\",\r",
									"          \"reel_images\",\r",
									"          \"reel_music\",\r",
									"          \"created\"\r",
									"        ]\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"profile\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(response, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reels/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reels",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Reel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"{\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"profile\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"user_id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"username\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"nickname\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"profile_photo\": {}\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"user_id\",\r",
									"        \"username\",\r",
									"        \"nickname\",\r",
									"        \"profile_photo\"\r",
									"      ]\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"reel_id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"location\": {},\r",
									"        \"total_likes\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"total_comments\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"total_views\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"total_shares\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"is_liked\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"allow_comments\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"reel_images\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"              \"reel_id\": {\r",
									"                \"type\": \"number\"\r",
									"              },\r",
									"              \"image_id\": {\r",
									"                \"type\": \"number\"\r",
									"              },\r",
									"              \"images\": {\r",
									"                \"type\": \"object\",\r",
									"                \"properties\": {\r",
									"                  \"id\": {\r",
									"                    \"type\": \"number\"\r",
									"                  },\r",
									"                  \"is_paid\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                  },\r",
									"                  \"filters\": {\r",
									"                    \"type\": \"string\"\r",
									"                  },\r",
									"                  \"image_url\": {\r",
									"                    \"type\": \"string\"\r",
									"                  }\r",
									"                },\r",
									"                \"required\": [\r",
									"                  \"id\",\r",
									"                  \"is_paid\",\r",
									"                  \"filters\",\r",
									"                  \"image_url\"\r",
									"                ]\r",
									"              }\r",
									"            },\r",
									"            \"required\": [\r",
									"              \"reel_id\",\r",
									"              \"image_id\",\r",
									"              \"images\"\r",
									"            ]\r",
									"          }\r",
									"        },\r",
									"        \"reel_music\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"created\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"reel_id\",\r",
									"        \"location\",\r",
									"        \"total_likes\",\r",
									"        \"total_comments\",\r",
									"        \"total_views\",\r",
									"        \"total_shares\",\r",
									"        \"is_liked\",\r",
									"        \"allow_comments\",\r",
									"        \"reel_images\",\r",
									"        \"reel_music\",\r",
									"        \"created\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"profile\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(response, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reels/{{reel_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reels",
								"{{reel_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Reel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let response = pm.response.json();\r",
									"\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reels/{{reel_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reels",
								"{{reel_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Like Reel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reels/like/?reel_id={{reel_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reels",
								"like",
								""
							],
							"query": [
								{
									"key": "reel_id",
									"value": "{{reel_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Unlike Reel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reels/unlike/?reel_id={{reel_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reels",
								"unlike",
								""
							],
							"query": [
								{
									"key": "reel_id",
									"value": "{{reel_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Save Reel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reels/save/{{reel_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reels",
								"save",
								"{{reel_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Saved Reels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"profile\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"user_id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"username\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"nickname\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"profile_photo\": {}\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"user_id\",\r",
									"        \"username\",\r",
									"        \"nickname\",\r",
									"        \"profile_photo\"\r",
									"      ]\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"          \"id\": {\r",
									"            \"type\": \"number\"\r",
									"          },\r",
									"          \"reel_id\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"location\": {},\r",
									"          \"total_likes\": {\r",
									"            \"type\": \"number\"\r",
									"          },\r",
									"          \"total_comments\": {\r",
									"            \"type\": \"number\"\r",
									"          },\r",
									"          \"total_views\": {\r",
									"            \"type\": \"number\"\r",
									"          },\r",
									"          \"total_shares\": {\r",
									"            \"type\": \"number\"\r",
									"          },\r",
									"          \"is_liked\": {\r",
									"            \"type\": \"boolean\"\r",
									"          },\r",
									"          \"allow_comments\": {\r",
									"            \"type\": \"boolean\"\r",
									"          },\r",
									"          \"reel_images\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"reel_id\": {\r",
									"                  \"type\": \"number\"\r",
									"                },\r",
									"                \"image_id\": {\r",
									"                  \"type\": \"number\"\r",
									"                },\r",
									"                \"images\": {\r",
									"                  \"type\": \"object\",\r",
									"                  \"properties\": {\r",
									"                    \"id\": {\r",
									"                      \"type\": \"number\"\r",
									"                    },\r",
									"                    \"is_paid\": {\r",
									"                      \"type\": \"boolean\"\r",
									"                    },\r",
									"                    \"filters\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"image_url\": {\r",
									"                      \"type\": \"string\"\r",
									"                    }\r",
									"                  },\r",
									"                  \"required\": [\r",
									"                    \"id\",\r",
									"                    \"is_paid\",\r",
									"                    \"filters\",\r",
									"                    \"image_url\"\r",
									"                  ]\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"reel_id\",\r",
									"                \"image_id\",\r",
									"                \"images\"\r",
									"              ]\r",
									"            }\r",
									"          },\r",
									"          \"reel_music\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {}\r",
									"          },\r",
									"          \"created\": {\r",
									"            \"type\": \"string\"\r",
									"          }\r",
									"        },\r",
									"        \"required\": [\r",
									"          \"id\",\r",
									"          \"reel_id\",\r",
									"          \"location\",\r",
									"          \"total_likes\",\r",
									"          \"total_comments\",\r",
									"          \"total_views\",\r",
									"          \"total_shares\",\r",
									"          \"is_liked\",\r",
									"          \"allow_comments\",\r",
									"          \"reel_images\",\r",
									"          \"reel_music\",\r",
									"          \"created\"\r",
									"        ]\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"profile\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reels/save/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reels",
								"save",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Save Reel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reels/save/{{reel_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reels",
								"save",
								"{{reel_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reel View",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reels/view/?reel_id={{reel_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reels",
								"view",
								""
							],
							"query": [
								{
									"key": "reel_id",
									"value": "{{reel_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Reel Share",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reels/share/?reel_id={{reel_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reels",
								"share",
								""
							],
							"query": [
								{
									"key": "reel_id",
									"value": "{{reel_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment Reel",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"reel_id\": \"{{reel_id}}\",\r\n  \"content\": \"Some Comment\",\r\n  \"image_id\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/reels/comment/create/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reels",
								"comment",
								"create",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Stickers",
			"item": [
				{
					"name": "Get Sticker Packs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"   {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"pack_name\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"pack_img\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"pack_img45\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"category\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"price\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"status\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"created\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"bought\": {\r",
									"        \"type\": \"boolean\"\r",
									"      }\r",
									"    },\r",
									"    \"required\": [\r",
									"      \"id\",\r",
									"      \"pack_name\",\r",
									"      \"pack_img\",\r",
									"      \"pack_img45\",\r",
									"      \"category\",\r",
									"      \"price\",\r",
									"      \"status\",\r",
									"      \"created\",\r",
									"      \"bought\"\r",
									"    ]\r",
									"  }\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/stickers/packs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stickers",
								"packs"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Sticker Pack Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"   {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"packageId\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"artistName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"packageName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"packageImg\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"packageImg_45\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"packageAnimated\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"packageCategory\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"packageKeywords\": {},\r",
									"    \"isNew\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"language\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"isDownload\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"isWish\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"price\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"stickers\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"          \"stickerId\": {\r",
									"            \"type\": \"number\"\r",
									"          },\r",
									"          \"packageId\": {\r",
									"            \"type\": \"number\"\r",
									"          },\r",
									"          \"stickerImg\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"stickerImg_300\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"stickerImg_408\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"stickerImg_618\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"stickerImg_200\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"stickerImg_96\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"favoriteYN\": {\r",
									"            \"type\": \"string\"\r",
									"          }\r",
									"        },\r",
									"        \"required\": [\r",
									"          \"stickerId\",\r",
									"          \"packageId\",\r",
									"          \"stickerImg\",\r",
									"          \"stickerImg_300\",\r",
									"          \"stickerImg_408\",\r",
									"          \"stickerImg_618\",\r",
									"          \"stickerImg_200\",\r",
									"          \"stickerImg_96\",\r",
									"          \"favoriteYN\"\r",
									"        ]\r",
									"      }\r",
									"    },\r",
									"    \"bought\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"packageId\",\r",
									"    \"artistName\",\r",
									"    \"packageName\",\r",
									"    \"packageImg\",\r",
									"    \"packageImg_45\",\r",
									"    \"packageAnimated\",\r",
									"    \"packageCategory\",\r",
									"    \"packageKeywords\",\r",
									"    \"isNew\",\r",
									"    \"language\",\r",
									"    \"isDownload\",\r",
									"    \"isWish\",\r",
									"    \"price\",\r",
									"    \"stickers\",\r",
									"    \"bought\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/stickers/packs/{{pack_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stickers",
								"packs",
								"{{pack_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Buy Sticker Pack",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/stickers/buy?pack_id={{pack_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"stickers",
								"buy"
							],
							"query": [
								{
									"key": "pack_id",
									"value": "{{pack_id}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Notification",
			"item": [
				{
					"name": "Get Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"{\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"notifications\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"last_key\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"notifications\",\r",
									"        \"last_key\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notification/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notification",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove All Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"{\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notification/remove-all",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notification",
								"remove-all"
							]
						}
					},
					"response": []
				},
				{
					"name": "Read All Notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"{\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/notification/read-all",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"notification",
								"read-all"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Other",
			"item": [
				{
					"name": "Get Privacy Policy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/settings/privacy-policy",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"settings",
								"privacy-policy"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Tickers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/spot/ticker",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"spot",
								"ticker"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Feed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									" {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"posts\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"data\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"data\"\r",
									"      ]\r",
									"    },\r",
									"    \"total\": {\r",
									"      \"type\": \"number\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"posts\",\r",
									"    \"total\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/feed/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"feed",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"{\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"session_id\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"session_id\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let token = pm.response.headers.get(\"x-token\");\r",
									"if (token) {\r",
									"    pm.collectionVariables.set(\"access_token\", token);  // Store in collection variable\r",
									"    console.log(\"Access Token set to:\", token);\r",
									"} else {\r",
									"    console.log(\"x-token not found in response headers\");\r",
									"}\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"user_id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"username\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"nickname\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"birthdate\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"gender\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"email\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"phone\": {},\r",
									"        \"description\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"account_status\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"kyc_status\": {},\r",
									"        \"role\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"ref_code\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"created\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"updated\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"followings\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"followers\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"total_likes\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"total_posts\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"total_earned\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"auth_type\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"kyc_reject_labels\": {},\r",
									"        \"profile_photo\": {},\r",
									"        \"wallpaper\": {},\r",
									"        \"category\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"private_profile\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"show_my_stars\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"show_when_i_type\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"show_balance\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"show_last_mounth_profit\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"show_total_earned\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"show_online\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"show_no_one_sees_when_you_were_last_online\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"interests\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"ad_intensity\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"notify_likes\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"notify_comment_on_my_post\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"notify_reply_to_my_comment\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"notify_mention\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"notify_reaction_on_my_post\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"notify_new_sub\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"notify_important_events\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"vault_account_id\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"user_id\",\r",
									"        \"username\",\r",
									"        \"nickname\",\r",
									"        \"birthdate\",\r",
									"        \"gender\",\r",
									"        \"email\",\r",
									"        \"phone\",\r",
									"        \"description\",\r",
									"        \"account_status\",\r",
									"        \"kyc_status\",\r",
									"        \"role\",\r",
									"        \"ref_code\",\r",
									"        \"created\",\r",
									"        \"updated\",\r",
									"        \"followings\",\r",
									"        \"followers\",\r",
									"        \"total_likes\",\r",
									"        \"total_posts\",\r",
									"        \"total_earned\",\r",
									"        \"auth_type\",\r",
									"        \"kyc_reject_labels\",\r",
									"        \"profile_photo\",\r",
									"        \"wallpaper\",\r",
									"        \"category\",\r",
									"        \"private_profile\",\r",
									"        \"show_my_stars\",\r",
									"        \"show_when_i_type\",\r",
									"        \"show_balance\",\r",
									"        \"show_last_mounth_profit\",\r",
									"        \"show_total_earned\",\r",
									"        \"show_online\",\r",
									"        \"show_no_one_sees_when_you_were_last_online\",\r",
									"        \"interests\",\r",
									"        \"ad_intensity\",\r",
									"        \"notify_likes\",\r",
									"        \"notify_comment_on_my_post\",\r",
									"        \"notify_reply_to_my_comment\",\r",
									"        \"notify_mention\",\r",
									"        \"notify_reaction_on_my_post\",\r",
									"        \"notify_new_sub\",\r",
									"        \"notify_important_events\",\r",
									"        \"vault_account_id\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\"\r",
									"  ]\r",
									"}\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"identity\": \"{{temp_email}}\",\r\n\"password\": \"someTest\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Rewards",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/rewards",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"rewards"
							]
						}
					},
					"response": []
				},
				{
					"name": "Follow User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"{\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"user_id\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"user_id\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/follow/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"follow",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unfollow User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/unfollow/{{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"unfollow",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Followings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"followings\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"followings\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/followings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"followings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Followers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"followers\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"followers\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/followers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"followers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Pre Signin Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"users\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"count\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"last_key\": {}\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"users\",\r",
									"        \"count\",\r",
									"        \"last_key\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/pre-signins",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"pre-signins"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Referral Share Link",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"url\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"url\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/referral-link?user_id={{user_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"referral-link"
							],
							"query": [
								{
									"key": "user_id",
									"value": "{{user_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Qr Share",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									" {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"link\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"link\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/qr-share",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"qr-share"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Profile Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"{\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"is_blocked\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"blocked_by\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"user_id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"username\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"nickname\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"birthdate\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"gender\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"email\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"phone\": {},\r",
									"        \"description\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"account_status\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"kyc_status\": {},\r",
									"        \"role\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"ref_code\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"created\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"updated\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"followings\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"followers\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"total_likes\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"total_posts\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"total_earned\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"auth_type\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"kyc_reject_labels\": {},\r",
									"        \"profile_photo\": {},\r",
									"        \"wallpaper\": {},\r",
									"        \"category\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"private_profile\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"show_my_stars\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"show_when_i_type\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"show_balance\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"show_last_mounth_profit\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"show_total_earned\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"show_online\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"show_no_one_sees_when_you_were_last_online\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"interests\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"ad_intensity\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"notify_likes\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"notify_comment_on_my_post\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"notify_reply_to_my_comment\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"notify_mention\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"notify_reaction_on_my_post\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"notify_new_sub\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"notify_important_events\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"vault_account_id\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"user_id\",\r",
									"        \"username\",\r",
									"        \"nickname\",\r",
									"        \"birthdate\",\r",
									"        \"gender\",\r",
									"        \"email\",\r",
									"        \"phone\",\r",
									"        \"description\",\r",
									"        \"account_status\",\r",
									"        \"kyc_status\",\r",
									"        \"role\",\r",
									"        \"ref_code\",\r",
									"        \"created\",\r",
									"        \"updated\",\r",
									"        \"followings\",\r",
									"        \"followers\",\r",
									"        \"total_likes\",\r",
									"        \"total_posts\",\r",
									"        \"total_earned\",\r",
									"        \"auth_type\",\r",
									"        \"kyc_reject_labels\",\r",
									"        \"profile_photo\",\r",
									"        \"wallpaper\",\r",
									"        \"category\",\r",
									"        \"private_profile\",\r",
									"        \"show_my_stars\",\r",
									"        \"show_when_i_type\",\r",
									"        \"show_balance\",\r",
									"        \"show_last_mounth_profit\",\r",
									"        \"show_total_earned\",\r",
									"        \"show_online\",\r",
									"        \"show_no_one_sees_when_you_were_last_online\",\r",
									"        \"interests\",\r",
									"        \"ad_intensity\",\r",
									"        \"notify_likes\",\r",
									"        \"notify_comment_on_my_post\",\r",
									"        \"notify_reply_to_my_comment\",\r",
									"        \"notify_mention\",\r",
									"        \"notify_reaction_on_my_post\",\r",
									"        \"notify_new_sub\",\r",
									"        \"notify_important_events\",\r",
									"        \"vault_account_id\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"is_blocked\",\r",
									"    \"blocked_by\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Search Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"{\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"users\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"users\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/search?keyword=B&limit=10&page=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"search"
							],
							"query": [
								{
									"key": "keyword",
									"value": "B"
								},
								{
									"key": "limit",
									"value": "10"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Saved Searches",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"{\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"users\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"users\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/saved-searches",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"saved-searches"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Referred Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"{\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {}\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/referred-users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"referred-users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Online Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"online\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/online-status",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"online-status"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Description",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"country\": {},\r",
									"    \"follower_count\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_my_stars\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"show_no_one_sees_when_you_were_last_online\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"interests\": {},\r",
									"    \"profile_photo\": {},\r",
									"    \"auth_type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_when_i_type\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"ad_intensity\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"user_id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"gender\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"ref_code\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_balance\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_likes\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"id\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"role\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_last_mounth_profit\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_comment_on_my_post\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"username\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"wallpaper\": {},\r",
									"    \"created\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"notify_reply_to_my_comment\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_reaction_on_my_post\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"nickname\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"birthdate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"updated\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_total_earned\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_mention\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"following_count\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_online\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_new_sub\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"password\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"private_profile\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_important_events\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"country\",\r",
									"    \"follower_count\",\r",
									"    \"show_my_stars\",\r",
									"    \"show_no_one_sees_when_you_were_last_online\",\r",
									"    \"interests\",\r",
									"    \"profile_photo\",\r",
									"    \"auth_type\",\r",
									"    \"show_when_i_type\",\r",
									"    \"ad_intensity\",\r",
									"    \"user_id\",\r",
									"    \"gender\",\r",
									"    \"ref_code\",\r",
									"    \"show_balance\",\r",
									"    \"notify_likes\",\r",
									"    \"id\",\r",
									"    \"description\",\r",
									"    \"role\",\r",
									"    \"show_last_mounth_profit\",\r",
									"    \"notify_comment_on_my_post\",\r",
									"    \"username\",\r",
									"    \"wallpaper\",\r",
									"    \"created\",\r",
									"    \"notify_reply_to_my_comment\",\r",
									"    \"notify_reaction_on_my_post\",\r",
									"    \"nickname\",\r",
									"    \"birthdate\",\r",
									"    \"updated\",\r",
									"    \"show_total_earned\",\r",
									"    \"notify_mention\",\r",
									"    \"email\",\r",
									"    \"following_count\",\r",
									"    \"status\",\r",
									"    \"show_online\",\r",
									"    \"notify_new_sub\",\r",
									"    \"password\",\r",
									"    \"private_profile\",\r",
									"    \"notify_important_events\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"description\": \"Some Test Description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/update_descriptions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"update_descriptions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Private Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"is_blocked\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"user_id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"username\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"nickname\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"birthdate\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"gender\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"email\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"phone\": {},\r",
									"        \"description\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"account_status\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"kyc_status\": {},\r",
									"        \"role\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"ref_code\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"created\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"updated\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"followings\": {},\r",
									"        \"followers\": {},\r",
									"        \"total_likes\": {},\r",
									"        \"total_posts\": {},\r",
									"        \"total_earned\": {},\r",
									"        \"auth_type\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"kyc_reject_labels\": {},\r",
									"        \"profile_photo\": {},\r",
									"        \"wallpaper\": {},\r",
									"        \"category\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"private_profile\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"show_my_stars\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"show_when_i_type\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"show_balance\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"show_last_mounth_profit\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"show_total_earned\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"show_online\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"show_no_one_sees_when_you_were_last_online\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"interests\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"ad_intensity\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"notify_likes\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"notify_comment_on_my_post\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"notify_reply_to_my_comment\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"notify_mention\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"notify_reaction_on_my_post\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"notify_new_sub\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"notify_important_events\": {\r",
									"          \"type\": \"boolean\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"user_id\",\r",
									"        \"username\",\r",
									"        \"nickname\",\r",
									"        \"birthdate\",\r",
									"        \"gender\",\r",
									"        \"email\",\r",
									"        \"phone\",\r",
									"        \"description\",\r",
									"        \"account_status\",\r",
									"        \"kyc_status\",\r",
									"        \"role\",\r",
									"        \"ref_code\",\r",
									"        \"created\",\r",
									"        \"updated\",\r",
									"        \"followings\",\r",
									"        \"followers\",\r",
									"        \"total_likes\",\r",
									"        \"total_posts\",\r",
									"        \"total_earned\",\r",
									"        \"auth_type\",\r",
									"        \"kyc_reject_labels\",\r",
									"        \"profile_photo\",\r",
									"        \"wallpaper\",\r",
									"        \"category\",\r",
									"        \"private_profile\",\r",
									"        \"show_my_stars\",\r",
									"        \"show_when_i_type\",\r",
									"        \"show_balance\",\r",
									"        \"show_last_mounth_profit\",\r",
									"        \"show_total_earned\",\r",
									"        \"show_online\",\r",
									"        \"show_no_one_sees_when_you_were_last_online\",\r",
									"        \"interests\",\r",
									"        \"ad_intensity\",\r",
									"        \"notify_likes\",\r",
									"        \"notify_comment_on_my_post\",\r",
									"        \"notify_reply_to_my_comment\",\r",
									"        \"notify_mention\",\r",
									"        \"notify_reaction_on_my_post\",\r",
									"        \"notify_new_sub\",\r",
									"        \"notify_important_events\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"is_blocked\",\r",
									"    \"data\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/update_private_profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"update_private_profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show My Stars",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									" {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"country\": {},\r",
									"    \"follower_count\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_my_stars\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"show_no_one_sees_when_you_were_last_online\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"interests\": {},\r",
									"    \"profile_photo\": {},\r",
									"    \"auth_type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_when_i_type\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"ad_intensity\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"user_id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"gender\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"ref_code\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_balance\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_likes\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"id\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"role\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_last_mounth_profit\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_comment_on_my_post\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"username\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"wallpaper\": {},\r",
									"    \"created\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"notify_reply_to_my_comment\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_reaction_on_my_post\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"nickname\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"birthdate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"updated\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_total_earned\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_mention\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"following_count\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_online\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_new_sub\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"password\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"private_profile\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_important_events\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"country\",\r",
									"    \"follower_count\",\r",
									"    \"show_my_stars\",\r",
									"    \"show_no_one_sees_when_you_were_last_online\",\r",
									"    \"interests\",\r",
									"    \"profile_photo\",\r",
									"    \"auth_type\",\r",
									"    \"show_when_i_type\",\r",
									"    \"ad_intensity\",\r",
									"    \"user_id\",\r",
									"    \"gender\",\r",
									"    \"ref_code\",\r",
									"    \"show_balance\",\r",
									"    \"notify_likes\",\r",
									"    \"id\",\r",
									"    \"description\",\r",
									"    \"role\",\r",
									"    \"show_last_mounth_profit\",\r",
									"    \"notify_comment_on_my_post\",\r",
									"    \"username\",\r",
									"    \"wallpaper\",\r",
									"    \"created\",\r",
									"    \"notify_reply_to_my_comment\",\r",
									"    \"notify_reaction_on_my_post\",\r",
									"    \"nickname\",\r",
									"    \"birthdate\",\r",
									"    \"updated\",\r",
									"    \"show_total_earned\",\r",
									"    \"notify_mention\",\r",
									"    \"email\",\r",
									"    \"following_count\",\r",
									"    \"status\",\r",
									"    \"show_online\",\r",
									"    \"notify_new_sub\",\r",
									"    \"password\",\r",
									"    \"private_profile\",\r",
									"    \"notify_important_events\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/show_my_stars",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"show_my_stars"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show When I Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"country\": {},\r",
									"    \"follower_count\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_my_stars\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"show_no_one_sees_when_you_were_last_online\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"interests\": {},\r",
									"    \"profile_photo\": {},\r",
									"    \"auth_type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_when_i_type\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"ad_intensity\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"user_id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"gender\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"ref_code\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_balance\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_likes\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"id\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"role\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_last_mounth_profit\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_comment_on_my_post\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"username\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"wallpaper\": {},\r",
									"    \"created\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"notify_reply_to_my_comment\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_reaction_on_my_post\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"nickname\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"birthdate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"updated\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_total_earned\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_mention\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"following_count\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_online\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_new_sub\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"password\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"private_profile\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_important_events\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"country\",\r",
									"    \"follower_count\",\r",
									"    \"show_my_stars\",\r",
									"    \"show_no_one_sees_when_you_were_last_online\",\r",
									"    \"interests\",\r",
									"    \"profile_photo\",\r",
									"    \"auth_type\",\r",
									"    \"show_when_i_type\",\r",
									"    \"ad_intensity\",\r",
									"    \"user_id\",\r",
									"    \"gender\",\r",
									"    \"ref_code\",\r",
									"    \"show_balance\",\r",
									"    \"notify_likes\",\r",
									"    \"id\",\r",
									"    \"description\",\r",
									"    \"role\",\r",
									"    \"show_last_mounth_profit\",\r",
									"    \"notify_comment_on_my_post\",\r",
									"    \"username\",\r",
									"    \"wallpaper\",\r",
									"    \"created\",\r",
									"    \"notify_reply_to_my_comment\",\r",
									"    \"notify_reaction_on_my_post\",\r",
									"    \"nickname\",\r",
									"    \"birthdate\",\r",
									"    \"updated\",\r",
									"    \"show_total_earned\",\r",
									"    \"notify_mention\",\r",
									"    \"email\",\r",
									"    \"following_count\",\r",
									"    \"status\",\r",
									"    \"show_online\",\r",
									"    \"notify_new_sub\",\r",
									"    \"password\",\r",
									"    \"private_profile\",\r",
									"    \"notify_important_events\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/show_when_i_type",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"show_when_i_type"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show Balance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"country\": {},\r",
									"    \"follower_count\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_my_stars\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"show_no_one_sees_when_you_were_last_online\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"interests\": {},\r",
									"    \"profile_photo\": {},\r",
									"    \"auth_type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_when_i_type\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"ad_intensity\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"user_id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"gender\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"ref_code\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_balance\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_likes\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"id\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"role\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_last_mounth_profit\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_comment_on_my_post\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"username\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"wallpaper\": {},\r",
									"    \"created\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"notify_reply_to_my_comment\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_reaction_on_my_post\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"nickname\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"birthdate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"updated\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_total_earned\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_mention\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"following_count\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_online\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_new_sub\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"password\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"private_profile\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_important_events\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"country\",\r",
									"    \"follower_count\",\r",
									"    \"show_my_stars\",\r",
									"    \"show_no_one_sees_when_you_were_last_online\",\r",
									"    \"interests\",\r",
									"    \"profile_photo\",\r",
									"    \"auth_type\",\r",
									"    \"show_when_i_type\",\r",
									"    \"ad_intensity\",\r",
									"    \"user_id\",\r",
									"    \"gender\",\r",
									"    \"ref_code\",\r",
									"    \"show_balance\",\r",
									"    \"notify_likes\",\r",
									"    \"id\",\r",
									"    \"description\",\r",
									"    \"role\",\r",
									"    \"show_last_mounth_profit\",\r",
									"    \"notify_comment_on_my_post\",\r",
									"    \"username\",\r",
									"    \"wallpaper\",\r",
									"    \"created\",\r",
									"    \"notify_reply_to_my_comment\",\r",
									"    \"notify_reaction_on_my_post\",\r",
									"    \"nickname\",\r",
									"    \"birthdate\",\r",
									"    \"updated\",\r",
									"    \"show_total_earned\",\r",
									"    \"notify_mention\",\r",
									"    \"email\",\r",
									"    \"following_count\",\r",
									"    \"status\",\r",
									"    \"show_online\",\r",
									"    \"notify_new_sub\",\r",
									"    \"password\",\r",
									"    \"private_profile\",\r",
									"    \"notify_important_events\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/show_balance",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"show_balance"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show Last Mounth Profit",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"country\": {},\r",
									"    \"follower_count\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_my_stars\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"show_no_one_sees_when_you_were_last_online\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"interests\": {},\r",
									"    \"profile_photo\": {},\r",
									"    \"auth_type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_when_i_type\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"ad_intensity\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"user_id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"gender\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"ref_code\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_balance\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_likes\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"id\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"role\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_last_mounth_profit\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_comment_on_my_post\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"username\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"wallpaper\": {},\r",
									"    \"created\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"notify_reply_to_my_comment\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_reaction_on_my_post\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"nickname\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"birthdate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"updated\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_total_earned\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_mention\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"following_count\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_online\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_new_sub\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"password\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"private_profile\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_important_events\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"country\",\r",
									"    \"follower_count\",\r",
									"    \"show_my_stars\",\r",
									"    \"show_no_one_sees_when_you_were_last_online\",\r",
									"    \"interests\",\r",
									"    \"profile_photo\",\r",
									"    \"auth_type\",\r",
									"    \"show_when_i_type\",\r",
									"    \"ad_intensity\",\r",
									"    \"user_id\",\r",
									"    \"gender\",\r",
									"    \"ref_code\",\r",
									"    \"show_balance\",\r",
									"    \"notify_likes\",\r",
									"    \"id\",\r",
									"    \"description\",\r",
									"    \"role\",\r",
									"    \"show_last_mounth_profit\",\r",
									"    \"notify_comment_on_my_post\",\r",
									"    \"username\",\r",
									"    \"wallpaper\",\r",
									"    \"created\",\r",
									"    \"notify_reply_to_my_comment\",\r",
									"    \"notify_reaction_on_my_post\",\r",
									"    \"nickname\",\r",
									"    \"birthdate\",\r",
									"    \"updated\",\r",
									"    \"show_total_earned\",\r",
									"    \"notify_mention\",\r",
									"    \"email\",\r",
									"    \"following_count\",\r",
									"    \"status\",\r",
									"    \"show_online\",\r",
									"    \"notify_new_sub\",\r",
									"    \"password\",\r",
									"    \"private_profile\",\r",
									"    \"notify_important_events\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/show_last_mounth_profit",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"show_last_mounth_profit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show Total Earned",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"country\": {},\r",
									"    \"follower_count\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_my_stars\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"show_no_one_sees_when_you_were_last_online\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"interests\": {},\r",
									"    \"profile_photo\": {},\r",
									"    \"auth_type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_when_i_type\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"ad_intensity\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"user_id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"gender\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"ref_code\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_balance\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_likes\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"id\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"role\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_last_mounth_profit\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_comment_on_my_post\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"username\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"wallpaper\": {},\r",
									"    \"created\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"notify_reply_to_my_comment\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_reaction_on_my_post\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"nickname\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"birthdate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"updated\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_total_earned\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_mention\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"following_count\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_online\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_new_sub\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"password\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"private_profile\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_important_events\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"country\",\r",
									"    \"follower_count\",\r",
									"    \"show_my_stars\",\r",
									"    \"show_no_one_sees_when_you_were_last_online\",\r",
									"    \"interests\",\r",
									"    \"profile_photo\",\r",
									"    \"auth_type\",\r",
									"    \"show_when_i_type\",\r",
									"    \"ad_intensity\",\r",
									"    \"user_id\",\r",
									"    \"gender\",\r",
									"    \"ref_code\",\r",
									"    \"show_balance\",\r",
									"    \"notify_likes\",\r",
									"    \"id\",\r",
									"    \"description\",\r",
									"    \"role\",\r",
									"    \"show_last_mounth_profit\",\r",
									"    \"notify_comment_on_my_post\",\r",
									"    \"username\",\r",
									"    \"wallpaper\",\r",
									"    \"created\",\r",
									"    \"notify_reply_to_my_comment\",\r",
									"    \"notify_reaction_on_my_post\",\r",
									"    \"nickname\",\r",
									"    \"birthdate\",\r",
									"    \"updated\",\r",
									"    \"show_total_earned\",\r",
									"    \"notify_mention\",\r",
									"    \"email\",\r",
									"    \"following_count\",\r",
									"    \"status\",\r",
									"    \"show_online\",\r",
									"    \"notify_new_sub\",\r",
									"    \"password\",\r",
									"    \"private_profile\",\r",
									"    \"notify_important_events\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/show_total_earned",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"show_total_earned"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show Online And All See When",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"country\": {},\r",
									"    \"follower_count\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_my_stars\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"show_no_one_sees_when_you_were_last_online\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"interests\": {},\r",
									"    \"profile_photo\": {},\r",
									"    \"auth_type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_when_i_type\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"ad_intensity\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"user_id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"gender\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"ref_code\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_balance\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_likes\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"id\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"role\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_last_mounth_profit\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_comment_on_my_post\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"username\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"wallpaper\": {},\r",
									"    \"created\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"notify_reply_to_my_comment\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_reaction_on_my_post\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"nickname\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"birthdate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"updated\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_total_earned\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_mention\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"following_count\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_online\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_new_sub\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"password\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"private_profile\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_important_events\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"country\",\r",
									"    \"follower_count\",\r",
									"    \"show_my_stars\",\r",
									"    \"show_no_one_sees_when_you_were_last_online\",\r",
									"    \"interests\",\r",
									"    \"profile_photo\",\r",
									"    \"auth_type\",\r",
									"    \"show_when_i_type\",\r",
									"    \"ad_intensity\",\r",
									"    \"user_id\",\r",
									"    \"gender\",\r",
									"    \"ref_code\",\r",
									"    \"show_balance\",\r",
									"    \"notify_likes\",\r",
									"    \"id\",\r",
									"    \"description\",\r",
									"    \"role\",\r",
									"    \"show_last_mounth_profit\",\r",
									"    \"notify_comment_on_my_post\",\r",
									"    \"username\",\r",
									"    \"wallpaper\",\r",
									"    \"created\",\r",
									"    \"notify_reply_to_my_comment\",\r",
									"    \"notify_reaction_on_my_post\",\r",
									"    \"nickname\",\r",
									"    \"birthdate\",\r",
									"    \"updated\",\r",
									"    \"show_total_earned\",\r",
									"    \"notify_mention\",\r",
									"    \"email\",\r",
									"    \"following_count\",\r",
									"    \"status\",\r",
									"    \"show_online\",\r",
									"    \"notify_new_sub\",\r",
									"    \"password\",\r",
									"    \"private_profile\",\r",
									"    \"notify_important_events\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/show_online_and_all_see_when",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"show_online_and_all_see_when"
							]
						}
					},
					"response": []
				},
				{
					"name": "Show Online And No One See When",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									" {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"country\": {},\r",
									"    \"follower_count\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_my_stars\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"show_no_one_sees_when_you_were_last_online\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"interests\": {},\r",
									"    \"profile_photo\": {},\r",
									"    \"auth_type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_when_i_type\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"ad_intensity\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"user_id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"gender\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"ref_code\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_balance\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_likes\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"id\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"role\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_last_mounth_profit\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_comment_on_my_post\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"username\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"wallpaper\": {},\r",
									"    \"created\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"notify_reply_to_my_comment\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_reaction_on_my_post\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"nickname\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"birthdate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"updated\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_total_earned\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_mention\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"following_count\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_online\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_new_sub\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"password\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"private_profile\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_important_events\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"country\",\r",
									"    \"follower_count\",\r",
									"    \"show_my_stars\",\r",
									"    \"show_no_one_sees_when_you_were_last_online\",\r",
									"    \"interests\",\r",
									"    \"profile_photo\",\r",
									"    \"auth_type\",\r",
									"    \"show_when_i_type\",\r",
									"    \"ad_intensity\",\r",
									"    \"user_id\",\r",
									"    \"gender\",\r",
									"    \"ref_code\",\r",
									"    \"show_balance\",\r",
									"    \"notify_likes\",\r",
									"    \"id\",\r",
									"    \"description\",\r",
									"    \"role\",\r",
									"    \"show_last_mounth_profit\",\r",
									"    \"notify_comment_on_my_post\",\r",
									"    \"username\",\r",
									"    \"wallpaper\",\r",
									"    \"created\",\r",
									"    \"notify_reply_to_my_comment\",\r",
									"    \"notify_reaction_on_my_post\",\r",
									"    \"nickname\",\r",
									"    \"birthdate\",\r",
									"    \"updated\",\r",
									"    \"show_total_earned\",\r",
									"    \"notify_mention\",\r",
									"    \"email\",\r",
									"    \"following_count\",\r",
									"    \"status\",\r",
									"    \"show_online\",\r",
									"    \"notify_new_sub\",\r",
									"    \"password\",\r",
									"    \"private_profile\",\r",
									"    \"notify_important_events\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/show_online_and_no_one_see_when",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"show_online_and_no_one_see_when"
							]
						}
					},
					"response": []
				},
				{
					"name": "No Show Online And No One See When",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"country\": {},\r",
									"    \"follower_count\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_my_stars\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"show_no_one_sees_when_you_were_last_online\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"interests\": {},\r",
									"    \"profile_photo\": {},\r",
									"    \"auth_type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_when_i_type\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"ad_intensity\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"user_id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"gender\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"ref_code\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_balance\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_likes\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"id\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"role\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_last_mounth_profit\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_comment_on_my_post\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"username\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"wallpaper\": {},\r",
									"    \"created\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"notify_reply_to_my_comment\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_reaction_on_my_post\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"nickname\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"birthdate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"updated\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_total_earned\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_mention\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"following_count\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_online\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_new_sub\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"password\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"private_profile\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_important_events\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"country\",\r",
									"    \"follower_count\",\r",
									"    \"show_my_stars\",\r",
									"    \"show_no_one_sees_when_you_were_last_online\",\r",
									"    \"interests\",\r",
									"    \"profile_photo\",\r",
									"    \"auth_type\",\r",
									"    \"show_when_i_type\",\r",
									"    \"ad_intensity\",\r",
									"    \"user_id\",\r",
									"    \"gender\",\r",
									"    \"ref_code\",\r",
									"    \"show_balance\",\r",
									"    \"notify_likes\",\r",
									"    \"id\",\r",
									"    \"description\",\r",
									"    \"role\",\r",
									"    \"show_last_mounth_profit\",\r",
									"    \"notify_comment_on_my_post\",\r",
									"    \"username\",\r",
									"    \"wallpaper\",\r",
									"    \"created\",\r",
									"    \"notify_reply_to_my_comment\",\r",
									"    \"notify_reaction_on_my_post\",\r",
									"    \"nickname\",\r",
									"    \"birthdate\",\r",
									"    \"updated\",\r",
									"    \"show_total_earned\",\r",
									"    \"notify_mention\",\r",
									"    \"email\",\r",
									"    \"following_count\",\r",
									"    \"status\",\r",
									"    \"show_online\",\r",
									"    \"notify_new_sub\",\r",
									"    \"password\",\r",
									"    \"private_profile\",\r",
									"    \"notify_important_events\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/no_show_online_and_no_one_see_when",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"no_show_online_and_no_one_see_when"
							]
						}
					},
					"response": []
				},
				{
					"name": "Set Ad Intensity",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"country\": {},\r",
									"    \"follower_count\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_my_stars\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"show_no_one_sees_when_you_were_last_online\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"interests\": {},\r",
									"    \"profile_photo\": {},\r",
									"    \"auth_type\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_when_i_type\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"ad_intensity\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"user_id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"gender\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"ref_code\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_balance\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_likes\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"id\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"role\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_last_mounth_profit\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_comment_on_my_post\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"username\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"wallpaper\": {},\r",
									"    \"created\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"notify_reply_to_my_comment\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_reaction_on_my_post\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"nickname\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"birthdate\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"updated\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"show_total_earned\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_mention\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"email\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"following_count\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"status\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"show_online\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_new_sub\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"password\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"private_profile\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"notify_important_events\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"country\",\r",
									"    \"follower_count\",\r",
									"    \"show_my_stars\",\r",
									"    \"show_no_one_sees_when_you_were_last_online\",\r",
									"    \"interests\",\r",
									"    \"profile_photo\",\r",
									"    \"auth_type\",\r",
									"    \"show_when_i_type\",\r",
									"    \"ad_intensity\",\r",
									"    \"user_id\",\r",
									"    \"gender\",\r",
									"    \"ref_code\",\r",
									"    \"show_balance\",\r",
									"    \"notify_likes\",\r",
									"    \"id\",\r",
									"    \"description\",\r",
									"    \"role\",\r",
									"    \"show_last_mounth_profit\",\r",
									"    \"notify_comment_on_my_post\",\r",
									"    \"username\",\r",
									"    \"wallpaper\",\r",
									"    \"created\",\r",
									"    \"notify_reply_to_my_comment\",\r",
									"    \"notify_reaction_on_my_post\",\r",
									"    \"nickname\",\r",
									"    \"birthdate\",\r",
									"    \"updated\",\r",
									"    \"show_total_earned\",\r",
									"    \"notify_mention\",\r",
									"    \"email\",\r",
									"    \"following_count\",\r",
									"    \"status\",\r",
									"    \"show_online\",\r",
									"    \"notify_new_sub\",\r",
									"    \"password\",\r",
									"    \"private_profile\",\r",
									"    \"notify_important_events\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/set_ad_intensity?intensity=MIDDLE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"set_ad_intensity"
							],
							"query": [
								{
									"key": "intensity",
									"value": "MIDDLE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Notification Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"notify_likes\": false,\r\n  \"notify_comment_on_my_post\": false,\r\n  \"notify_reply_to_my_comment\": false,\r\n  \"notify_mention\": true,\r\n  \"notify_reaction_on_my_post\": false,\r\n  \"notify_new_sub\": true,\r\n  \"notify_important_events\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/notification-settings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"notification-settings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Blocking User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/block-user/2121",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"block-user",
								"2121"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Blocked User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"      \"id\": {\r",
									"        \"type\": \"number\"\r",
									"      },\r",
									"      \"user_id\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"username\": {},\r",
									"      \"nickname\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"profile_photo\": {}\r",
									"    },\r",
									"    \"required\": [\r",
									"      \"id\",\r",
									"      \"user_id\",\r",
									"      \"username\",\r",
									"      \"nickname\",\r",
									"      \"profile_photo\"\r",
									"    ]\r",
									"  }\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/block-user/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"block-user",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Unblocking User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/block-user/2121",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"block-user",
								"2121"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Star User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/create-star-user/b0574044ce434898a230db353ad9d548",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"create-star-user",
								"b0574044ce434898a230db353ad9d548"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Star Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"count\": {\r",
									"      \"type\": \"number\"\r",
									"    },\r",
									"    \"users\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"properties\": {\r",
									"          \"record_id\": {\r",
									"            \"type\": \"number\"\r",
									"          },\r",
									"          \"profile\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"              \"id\": {\r",
									"                \"type\": \"number\"\r",
									"              },\r",
									"              \"user_id\": {\r",
									"                \"type\": \"string\"\r",
									"              },\r",
									"              \"nickname\": {\r",
									"                \"type\": \"string\"\r",
									"              },\r",
									"              \"email\": {\r",
									"                \"type\": \"string\"\r",
									"              },\r",
									"              \"profile_photo\": {}\r",
									"            },\r",
									"            \"required\": [\r",
									"              \"id\",\r",
									"              \"user_id\",\r",
									"              \"nickname\",\r",
									"              \"email\",\r",
									"              \"profile_photo\"\r",
									"            ]\r",
									"          }\r",
									"        },\r",
									"        \"required\": [\r",
									"          \"record_id\",\r",
									"          \"profile\"\r",
									"        ]\r",
									"      }\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"count\",\r",
									"    \"users\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/star-users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"star-users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Star User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/delete-star-user/b0574044ce434898a230db353ad9d548",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"delete-star-user",
								"b0574044ce434898a230db353ad9d548"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Response time is less than 2s\", function () {\r",
									"    const expectedTime = Number(pm.collectionVariables.get(\"response_time\"));\r",
									"    pm.expect(pm.response.responseTime).to.be.below(expectedTime);\r",
									"});\r",
									"const schema =\r",
									"  {\r",
									"  \"title\": \"Generated schema for Root\",\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"success\"\r",
									"  ]\r",
									"};\r",
									"let responseData = pm.response.json();\r",
									"pm.test(\"Response should match the JSON schema\", function () {\r",
									"    pm.expect(tv4.validate(responseData, schema)).to.be.true;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "X-Token",
								"value": "{{access_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/delete-account",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"delete-account"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://api-dev.alemx.com",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI3ZTM3ZTM2YjAxYzg0YzZhYmZmNWJhZDViMDBiZTg0NSIsImp0aSI6IjRkNzA1N2MxMDg0MTQxZDI5ODViOGUzYTRkZWM1YTZlIiwiaWF0IjoxNzQxNTgzNzc4LCJhaW0iOiJBQ0NFU1MiLCJleHAiOjE3NDQwMDI5Nzh9.T8AK7HaVpNk6lEDlHJxVBg0pJRYpJZej0TTC9SMgetw",
			"type": "string"
		},
		{
			"key": "post_id",
			"value": "301",
			"type": "string"
		},
		{
			"key": "pack_id",
			"value": "16525",
			"type": "string"
		},
		{
			"key": "user_id",
			"value": ""
		},
		{
			"key": "comment_id",
			"value": ""
		},
		{
			"key": "static_post_id",
			"value": "301",
			"type": "string"
		},
		{
			"key": "story_id",
			"value": ""
		},
		{
			"key": "temp_email",
			"value": ""
		},
		{
			"key": "otp_code",
			"value": ""
		},
		{
			"key": "nickname",
			"value": ""
		},
		{
			"key": "crypto_wallet",
			"value": ""
		},
		{
			"key": "response_time",
			"value": "2000",
			"type": "string"
		},
		{
			"key": "post_guid",
			"value": ""
		},
		{
			"key": "reel_id",
			"value": ""
		}
	]
}